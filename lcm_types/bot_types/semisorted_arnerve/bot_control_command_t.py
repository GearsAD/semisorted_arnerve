"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class bot_control_command_t(object):
    __slots__ = ["timestamp", "name", "botTreadVelLeft", "botTreadVelright", "isLightsOn", "isInfraredOn"]

    def __init__(self):
        self.timestamp = 0
        self.name = ""
        self.botTreadVelLeft = 0.0
        self.botTreadVelright = 0.0
        self.isLightsOn = 0
        self.isInfraredOn = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(bot_control_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.timestamp))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write("\0")
        buf.write(struct.pack(">ffbb", self.botTreadVelLeft, self.botTreadVelright, self.isLightsOn, self.isInfraredOn))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != bot_control_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bot_control_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = bot_control_command_t()
        self.timestamp = struct.unpack(">i", buf.read(4))[0]
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.botTreadVelLeft, self.botTreadVelright, self.isLightsOn, self.isInfraredOn = struct.unpack(">ffbb", buf.read(10))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if bot_control_command_t in parents: return 0
        tmphash = (0x67176971451a0a49) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if bot_control_command_t._packed_fingerprint is None:
            bot_control_command_t._packed_fingerprint = struct.pack(">Q", bot_control_command_t._get_hash_recursive([]))
        return bot_control_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

