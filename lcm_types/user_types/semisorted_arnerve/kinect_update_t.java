/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package semisorted_arnerve;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class kinect_update_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public byte issourceupdating;
    public byte istrackingbody;
    public semisorted_arnerve.kinect_joint_t torsoposition;
    public double forwardvec[];
    public double upvec[];
    public double rightvec[];
    public byte is_rhandclosed;
    public byte is_lhandclosed;
    public semisorted_arnerve.kinect_joint_t rhandposition;
    public semisorted_arnerve.kinect_joint_t lhandposition;
    public double headorientation[];
    public semisorted_arnerve.kinect_joint_t headposition;
    public semisorted_arnerve.kinect_rawdata_t rawkinectdata;
 
    public kinect_update_t()
    {
        forwardvec = new double[3];
        upvec = new double[3];
        rightvec = new double[3];
        headorientation = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfd475b70f54a5e35L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(semisorted_arnerve.kinect_update_t.class))
            return 0L;
 
        classes.add(semisorted_arnerve.kinect_update_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
             + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
             + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
             + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
             + semisorted_arnerve.kinect_rawdata_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte(this.issourceupdating); 
 
        outs.writeByte(this.istrackingbody); 
 
        this.torsoposition._encodeRecursive(outs); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.forwardvec[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.upvec[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rightvec[a]); 
        }
 
        outs.writeByte(this.is_rhandclosed); 
 
        outs.writeByte(this.is_lhandclosed); 
 
        this.rhandposition._encodeRecursive(outs); 
 
        this.lhandposition._encodeRecursive(outs); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.headorientation[a]); 
        }
 
        this.headposition._encodeRecursive(outs); 
 
        this.rawkinectdata._encodeRecursive(outs); 
 
    }
 
    public kinect_update_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public kinect_update_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static semisorted_arnerve.kinect_update_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        semisorted_arnerve.kinect_update_t o = new semisorted_arnerve.kinect_update_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.issourceupdating = ins.readByte();
 
        this.istrackingbody = ins.readByte();
 
        this.torsoposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
        this.forwardvec = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.forwardvec[a] = ins.readDouble();
        }
 
        this.upvec = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.upvec[a] = ins.readDouble();
        }
 
        this.rightvec = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rightvec[a] = ins.readDouble();
        }
 
        this.is_rhandclosed = ins.readByte();
 
        this.is_lhandclosed = ins.readByte();
 
        this.rhandposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
        this.lhandposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
        this.headorientation = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.headorientation[a] = ins.readDouble();
        }
 
        this.headposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
        this.rawkinectdata = semisorted_arnerve.kinect_rawdata_t._decodeRecursiveFactory(ins);
 
    }
 
    public semisorted_arnerve.kinect_update_t copy()
    {
        semisorted_arnerve.kinect_update_t outobj = new semisorted_arnerve.kinect_update_t();
        outobj.timestamp = this.timestamp;
 
        outobj.issourceupdating = this.issourceupdating;
 
        outobj.istrackingbody = this.istrackingbody;
 
        outobj.torsoposition = this.torsoposition.copy();
 
        outobj.forwardvec = new double[(int) 3];
        System.arraycopy(this.forwardvec, 0, outobj.forwardvec, 0, 3); 
        outobj.upvec = new double[(int) 3];
        System.arraycopy(this.upvec, 0, outobj.upvec, 0, 3); 
        outobj.rightvec = new double[(int) 3];
        System.arraycopy(this.rightvec, 0, outobj.rightvec, 0, 3); 
        outobj.is_rhandclosed = this.is_rhandclosed;
 
        outobj.is_lhandclosed = this.is_lhandclosed;
 
        outobj.rhandposition = this.rhandposition.copy();
 
        outobj.lhandposition = this.lhandposition.copy();
 
        outobj.headorientation = new double[(int) 3];
        System.arraycopy(this.headorientation, 0, outobj.headorientation, 0, 3); 
        outobj.headposition = this.headposition.copy();
 
        outobj.rawkinectdata = this.rawkinectdata.copy();
 
        return outobj;
    }
 
}

