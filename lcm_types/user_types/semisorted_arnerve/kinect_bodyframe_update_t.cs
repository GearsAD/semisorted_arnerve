/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace semisorted_arnerve
{
    public sealed class kinect_bodyframe_update_t : LCM.LCM.LCMEncodable
    {
        public semisorted_arnerve.kinect_joint_t[] bodyjoints;
 
        public kinect_bodyframe_update_t()
        {
            bodyjoints = new semisorted_arnerve.kinect_joint_t[25];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x833951cac4a4f9e8L;
 
        public const int SpineBase = 0;
        public const int SpineMid = 1;
        public const int Neck = 2;
        public const int Head = 3;
        public const int ShoulderLeft = 4;
        public const int ElbowLeft = 5;
        public const int WristLeft = 6;
        public const int HandLeft = 7;
        public const int ShoulderRight = 8;
        public const int ElbowRight = 9;
        public const int WristRight = 10;
        public const int HandRight = 11;
        public const int HipLeft = 12;
        public const int KneeLeft = 13;
        public const int AnkleLeft = 14;
        public const int FootLeft = 15;
        public const int HipRight = 16;
        public const int KneeRight = 17;
        public const int AnkleRight = 18;
        public const int FootRight = 19;
        public const int SpineShoulder = 20;
        public const int HandTipLeft = 21;
        public const int ThumbLeft = 22;
        public const int HandTipRight = 23;
        public const int ThumbRight = 24;

        static kinect_bodyframe_update_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("semisorted_arnerve.kinect_bodyframe_update_t"))
                return 0L;
 
            classes.Add("semisorted_arnerve.kinect_bodyframe_update_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 25; a++) {
                this.bodyjoints[a]._encodeRecursive(outs); 
            }
 
        }
 
        public kinect_bodyframe_update_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public kinect_bodyframe_update_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static semisorted_arnerve.kinect_bodyframe_update_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            semisorted_arnerve.kinect_bodyframe_update_t o = new semisorted_arnerve.kinect_bodyframe_update_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.bodyjoints = new semisorted_arnerve.kinect_joint_t[(int) 25];
            for (int a = 0; a < 25; a++) {
                this.bodyjoints[a] = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
            }
 
        }
 
        public semisorted_arnerve.kinect_bodyframe_update_t Copy()
        {
            semisorted_arnerve.kinect_bodyframe_update_t outobj = new semisorted_arnerve.kinect_bodyframe_update_t();
            outobj.bodyjoints = new semisorted_arnerve.kinect_joint_t[(int) 25];
            for (int a = 0; a < 25; a++) {
                outobj.bodyjoints[a] = this.bodyjoints[a].Copy();
            }
 
            return outobj;
        }
    }
}

