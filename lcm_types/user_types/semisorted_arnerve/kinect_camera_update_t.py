"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class kinect_camera_update_t(object):
    __slots__ = ["NUMRGBBYTES", "NUMRGBSMALLBYTES", "NUMDEPTHBYTES_WIDTH", "NUMDEPTHBYTES_HEIGHT", "rgb_jpg", "rgb_small_jpg", "depth", "issourceupdating_rgb", "issourceupdating_sgb_small", "issourceupdating_depth"]

    def __init__(self):
        self.NUMRGBBYTES = 0
        self.NUMRGBSMALLBYTES = 0
        self.NUMDEPTHBYTES_WIDTH = 0
        self.NUMDEPTHBYTES_HEIGHT = 0
        self.rgb_jpg = []
        self.rgb_small_jpg = []
        self.depth = []
        self.issourceupdating_rgb = 0
        self.issourceupdating_sgb_small = 0
        self.issourceupdating_depth = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(kinect_camera_update_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.NUMRGBBYTES, self.NUMRGBSMALLBYTES, self.NUMDEPTHBYTES_WIDTH, self.NUMDEPTHBYTES_HEIGHT))
        buf.write(self.rgb_jpg[:self.NUMRGBBYTES])
        buf.write(self.rgb_small_jpg[:self.NUMRGBSMALLBYTES])
        for i0 in range(self.NUMDEPTHBYTES_WIDTH):
            buf.write(struct.pack('>%df' % self.NUMDEPTHBYTES_HEIGHT, *self.depth[i0][:self.NUMDEPTHBYTES_HEIGHT]))
        buf.write(struct.pack(">BBB", self.issourceupdating_rgb, self.issourceupdating_sgb_small, self.issourceupdating_depth))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != kinect_camera_update_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kinect_camera_update_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kinect_camera_update_t()
        self.NUMRGBBYTES, self.NUMRGBSMALLBYTES, self.NUMDEPTHBYTES_WIDTH, self.NUMDEPTHBYTES_HEIGHT = struct.unpack(">iiii", buf.read(16))
        self.rgb_jpg = buf.read(self.NUMRGBBYTES)
        self.rgb_small_jpg = buf.read(self.NUMRGBSMALLBYTES)
        self.depth = []
        for i0 in range(self.NUMDEPTHBYTES_WIDTH):
            self.depth.append(struct.unpack('>%df' % self.NUMDEPTHBYTES_HEIGHT, buf.read(self.NUMDEPTHBYTES_HEIGHT * 4)))
        self.issourceupdating_rgb, self.issourceupdating_sgb_small, self.issourceupdating_depth = struct.unpack(">BBB", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kinect_camera_update_t in parents: return 0
        tmphash = (0x1584bd15e3abb09b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kinect_camera_update_t._packed_fingerprint is None:
            kinect_camera_update_t._packed_fingerprint = struct.pack(">Q", kinect_camera_update_t._get_hash_recursive([]))
        return kinect_camera_update_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

