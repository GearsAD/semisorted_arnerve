/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace semisorted_arnerve
{
    public sealed class joystick_update_t : LCM.LCM.LCMEncodable
    {
        public String name;
        public byte numAxes;
        public int[] axes;
        public byte numButtons;
        public bool[] buttons;
        public byte numHats;
        public short[] hats;
 
        public joystick_update_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x01a50ae30e2935eeL;
 
        static joystick_update_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("semisorted_arnerve.joystick_update_t"))
                return 0L;
 
            classes.Add("semisorted_arnerve.joystick_update_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.numAxes); 
 
            for (int a = 0; a < this.numAxes; a++) {
                outs.Write(this.axes[a]); 
            }
 
            outs.Write(this.numButtons); 
 
            for (int a = 0; a < this.numButtons; a++) {
                outs.Write(this.buttons[a]); 
            }
 
            outs.Write(this.numHats); 
 
            for (int a = 0; a < this.numHats; a++) {
                outs.Write(this.hats[a]); 
            }
 
        }
 
        public joystick_update_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public joystick_update_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static semisorted_arnerve.joystick_update_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            semisorted_arnerve.joystick_update_t o = new semisorted_arnerve.joystick_update_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.numAxes = ins.ReadByte();
 
            this.axes = new int[(int) numAxes];
            for (int a = 0; a < this.numAxes; a++) {
                this.axes[a] = ins.ReadInt32();
            }
 
            this.numButtons = ins.ReadByte();
 
            this.buttons = new bool[(int) numButtons];
            for (int a = 0; a < this.numButtons; a++) {
                this.buttons[a] = ins.ReadBoolean();
            }
 
            this.numHats = ins.ReadByte();
 
            this.hats = new short[(int) numHats];
            for (int a = 0; a < this.numHats; a++) {
                this.hats[a] = ins.ReadInt16();
            }
 
        }
 
        public semisorted_arnerve.joystick_update_t Copy()
        {
            semisorted_arnerve.joystick_update_t outobj = new semisorted_arnerve.joystick_update_t();
            outobj.name = this.name;
 
            outobj.numAxes = this.numAxes;
 
            outobj.axes = new int[(int) numAxes];
            for (int a = 0; a < this.numAxes; a++) {
                outobj.axes[a] = this.axes[a];
            }
 
            outobj.numButtons = this.numButtons;
 
            outobj.buttons = new bool[(int) numButtons];
            for (int a = 0; a < this.numButtons; a++) {
                outobj.buttons[a] = this.buttons[a];
            }
 
            outobj.numHats = this.numHats;
 
            outobj.hats = new short[(int) numHats];
            for (int a = 0; a < this.numHats; a++) {
                outobj.hats[a] = this.hats[a];
            }
 
            return outobj;
        }
    }
}

