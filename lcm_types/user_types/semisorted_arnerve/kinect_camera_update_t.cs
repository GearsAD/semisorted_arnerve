/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace semisorted_arnerve
{
    public sealed class kinect_camera_update_t : LCM.LCM.LCMEncodable
    {
        public int NUMRGBBYTES;
        public int NUMRGBSMALLBYTES;
        public int NUMDEPTHBYTES_WIDTH;
        public int NUMDEPTHBYTES_HEIGHT;
        public byte[] rgb_jpg;
        public byte[] rgb_small_jpg;
        public float[,] depth;
        public byte issourceupdating_rgb;
        public byte issourceupdating_sgb_small;
        public byte issourceupdating_depth;
 
        public kinect_camera_update_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1584bd15e3abb09bL;
 
        static kinect_camera_update_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("semisorted_arnerve.kinect_camera_update_t"))
                return 0L;
 
            classes.Add("semisorted_arnerve.kinect_camera_update_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.NUMRGBBYTES); 
 
            outs.Write(this.NUMRGBSMALLBYTES); 
 
            outs.Write(this.NUMDEPTHBYTES_WIDTH); 
 
            outs.Write(this.NUMDEPTHBYTES_HEIGHT); 
 
            for (int a = 0; a < this.NUMRGBBYTES; a++) {
                outs.Write(this.rgb_jpg[a]); 
            }
 
            for (int a = 0; a < this.NUMRGBSMALLBYTES; a++) {
                outs.Write(this.rgb_small_jpg[a]); 
            }
 
            for (int a = 0; a < this.NUMDEPTHBYTES_WIDTH; a++) {
                for (int b = 0; b < this.NUMDEPTHBYTES_HEIGHT; b++) {
                    outs.Write(this.depth[a,b]); 
                }
            }
 
            outs.Write(this.issourceupdating_rgb); 
 
            outs.Write(this.issourceupdating_sgb_small); 
 
            outs.Write(this.issourceupdating_depth); 
 
        }
 
        public kinect_camera_update_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public kinect_camera_update_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static semisorted_arnerve.kinect_camera_update_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            semisorted_arnerve.kinect_camera_update_t o = new semisorted_arnerve.kinect_camera_update_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.NUMRGBBYTES = ins.ReadInt32();
 
            this.NUMRGBSMALLBYTES = ins.ReadInt32();
 
            this.NUMDEPTHBYTES_WIDTH = ins.ReadInt32();
 
            this.NUMDEPTHBYTES_HEIGHT = ins.ReadInt32();
 
            this.rgb_jpg = new byte[(int) NUMRGBBYTES];
            for (int a = 0; a < this.NUMRGBBYTES; a++) {
                this.rgb_jpg[a] = ins.ReadByte();
            }
 
            this.rgb_small_jpg = new byte[(int) NUMRGBSMALLBYTES];
            for (int a = 0; a < this.NUMRGBSMALLBYTES; a++) {
                this.rgb_small_jpg[a] = ins.ReadByte();
            }
 
            this.depth = new float[(int) NUMDEPTHBYTES_WIDTH,(int) NUMDEPTHBYTES_HEIGHT];
            for (int a = 0; a < this.NUMDEPTHBYTES_WIDTH; a++) {
                for (int b = 0; b < this.NUMDEPTHBYTES_HEIGHT; b++) {
                    this.depth[a,b] = ins.ReadSingle();
                }
            }
 
            this.issourceupdating_rgb = ins.ReadByte();
 
            this.issourceupdating_sgb_small = ins.ReadByte();
 
            this.issourceupdating_depth = ins.ReadByte();
 
        }
 
        public semisorted_arnerve.kinect_camera_update_t Copy()
        {
            semisorted_arnerve.kinect_camera_update_t outobj = new semisorted_arnerve.kinect_camera_update_t();
            outobj.NUMRGBBYTES = this.NUMRGBBYTES;
 
            outobj.NUMRGBSMALLBYTES = this.NUMRGBSMALLBYTES;
 
            outobj.NUMDEPTHBYTES_WIDTH = this.NUMDEPTHBYTES_WIDTH;
 
            outobj.NUMDEPTHBYTES_HEIGHT = this.NUMDEPTHBYTES_HEIGHT;
 
            outobj.rgb_jpg = new byte[(int) NUMRGBBYTES];
            for (int a = 0; a < this.NUMRGBBYTES; a++) {
                outobj.rgb_jpg[a] = this.rgb_jpg[a];
            }
 
            outobj.rgb_small_jpg = new byte[(int) NUMRGBSMALLBYTES];
            for (int a = 0; a < this.NUMRGBSMALLBYTES; a++) {
                outobj.rgb_small_jpg[a] = this.rgb_small_jpg[a];
            }
 
            outobj.depth = new float[(int) NUMDEPTHBYTES_WIDTH,(int) NUMDEPTHBYTES_HEIGHT];
            for (int a = 0; a < this.NUMDEPTHBYTES_WIDTH; a++) {
                for (int b = 0; b < this.NUMDEPTHBYTES_HEIGHT; b++) {
                    outobj.depth[a,b] = this.depth[a,b];
                }
            }
 
            outobj.issourceupdating_rgb = this.issourceupdating_rgb;
 
            outobj.issourceupdating_sgb_small = this.issourceupdating_sgb_small;
 
            outobj.issourceupdating_depth = this.issourceupdating_depth;
 
            return outobj;
        }
    }
}

