"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class joystick_update_t(object):
    __slots__ = ["name", "numAxes", "axes", "numButtons", "buttons", "numHats", "hats"]

    def __init__(self):
        self.name = ""
        self.numAxes = 0
        self.axes = []
        self.numButtons = 0
        self.buttons = []
        self.numHats = 0
        self.hats = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(joystick_update_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write("\0")
        buf.write(struct.pack(">b", self.numAxes))
        buf.write(struct.pack('>%di' % self.numAxes, *self.axes[:self.numAxes]))
        buf.write(struct.pack(">b", self.numButtons))
        buf.write(struct.pack('>%db' % self.numButtons, *self.buttons[:self.numButtons]))
        buf.write(struct.pack(">b", self.numHats))
        buf.write(struct.pack('>%dh' % self.numHats, *self.hats[:self.numHats]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != joystick_update_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joystick_update_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joystick_update_t()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.numAxes = struct.unpack(">b", buf.read(1))[0]
        self.axes = struct.unpack('>%di' % self.numAxes, buf.read(self.numAxes * 4))
        self.numButtons = struct.unpack(">b", buf.read(1))[0]
        self.buttons = struct.unpack('>%db' % self.numButtons, buf.read(self.numButtons))
        self.numHats = struct.unpack(">b", buf.read(1))[0]
        self.hats = struct.unpack('>%dh' % self.numHats, buf.read(self.numHats * 2))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if joystick_update_t in parents: return 0
        tmphash = (0xf3749dd16a848cbd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joystick_update_t._packed_fingerprint is None:
            joystick_update_t._packed_fingerprint = struct.pack(">Q", joystick_update_t._get_hash_recursive([]))
        return joystick_update_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

