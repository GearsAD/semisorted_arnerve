/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package semisorted_arnerve;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class wearable_update_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public byte issourceupdating;
    public byte numKeysDown;
    public short keysPressed[];
    public semisorted_arnerve.joystick_update_t joystick;
 
    public wearable_update_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x27622aafeb64febfL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(semisorted_arnerve.wearable_update_t.class))
            return 0L;
 
        classes.add(semisorted_arnerve.wearable_update_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + semisorted_arnerve.joystick_update_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeByte(this.issourceupdating); 
 
        outs.writeByte(this.numKeysDown); 
 
        for (int a = 0; a < this.numKeysDown; a++) {
            outs.writeShort(this.keysPressed[a]); 
        }
 
        this.joystick._encodeRecursive(outs); 
 
    }
 
    public wearable_update_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public wearable_update_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static semisorted_arnerve.wearable_update_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        semisorted_arnerve.wearable_update_t o = new semisorted_arnerve.wearable_update_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.issourceupdating = ins.readByte();
 
        this.numKeysDown = ins.readByte();
 
        this.keysPressed = new short[(int) numKeysDown];
        for (int a = 0; a < this.numKeysDown; a++) {
            this.keysPressed[a] = ins.readShort();
        }
 
        this.joystick = semisorted_arnerve.joystick_update_t._decodeRecursiveFactory(ins);
 
    }
 
    public semisorted_arnerve.wearable_update_t copy()
    {
        semisorted_arnerve.wearable_update_t outobj = new semisorted_arnerve.wearable_update_t();
        outobj.timestamp = this.timestamp;
 
        outobj.issourceupdating = this.issourceupdating;
 
        outobj.numKeysDown = this.numKeysDown;
 
        outobj.keysPressed = new short[(int) numKeysDown];
        if (this.numKeysDown > 0)
            System.arraycopy(this.keysPressed, 0, outobj.keysPressed, 0, this.numKeysDown); 
        outobj.joystick = this.joystick.copy();
 
        return outobj;
    }
 
}

