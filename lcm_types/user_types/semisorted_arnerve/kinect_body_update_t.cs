/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace semisorted_arnerve
{
    public sealed class kinect_body_update_t : LCM.LCM.LCMEncodable
    {
        public String username;
        public byte istrackingbody;
        public semisorted_arnerve.kinect_joint_t torsoposition;
        public double[] forwardvec;
        public double[] upvec;
        public double[] rightvec;
        public byte is_rhandclosed;
        public byte is_lhandclosed;
        public semisorted_arnerve.kinect_joint_t rhandposition;
        public semisorted_arnerve.kinect_joint_t lhandposition;
        public double[] headorientation;
        public semisorted_arnerve.kinect_joint_t headposition;
        public semisorted_arnerve.kinect_bodyframe_update_t joint_data;
 
        public kinect_body_update_t()
        {
            forwardvec = new double[3];
            upvec = new double[3];
            rightvec = new double[3];
            headorientation = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x955673e04dc7ef8dL;
 
        static kinect_body_update_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("semisorted_arnerve.kinect_body_update_t"))
                return 0L;
 
            classes.Add("semisorted_arnerve.kinect_body_update_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
                 + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
                 + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
                 + semisorted_arnerve.kinect_joint_t._hashRecursive(classes)
                 + semisorted_arnerve.kinect_bodyframe_update_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.username); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.istrackingbody); 
 
            this.torsoposition._encodeRecursive(outs); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.forwardvec[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.upvec[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.rightvec[a]); 
            }
 
            outs.Write(this.is_rhandclosed); 
 
            outs.Write(this.is_lhandclosed); 
 
            this.rhandposition._encodeRecursive(outs); 
 
            this.lhandposition._encodeRecursive(outs); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.headorientation[a]); 
            }
 
            this.headposition._encodeRecursive(outs); 
 
            this.joint_data._encodeRecursive(outs); 
 
        }
 
        public kinect_body_update_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public kinect_body_update_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static semisorted_arnerve.kinect_body_update_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            semisorted_arnerve.kinect_body_update_t o = new semisorted_arnerve.kinect_body_update_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.username = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.istrackingbody = ins.ReadByte();
 
            this.torsoposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
            this.forwardvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.forwardvec[a] = ins.ReadDouble();
            }
 
            this.upvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.upvec[a] = ins.ReadDouble();
            }
 
            this.rightvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.rightvec[a] = ins.ReadDouble();
            }
 
            this.is_rhandclosed = ins.ReadByte();
 
            this.is_lhandclosed = ins.ReadByte();
 
            this.rhandposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
            this.lhandposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
            this.headorientation = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.headorientation[a] = ins.ReadDouble();
            }
 
            this.headposition = semisorted_arnerve.kinect_joint_t._decodeRecursiveFactory(ins);
 
            this.joint_data = semisorted_arnerve.kinect_bodyframe_update_t._decodeRecursiveFactory(ins);
 
        }
 
        public semisorted_arnerve.kinect_body_update_t Copy()
        {
            semisorted_arnerve.kinect_body_update_t outobj = new semisorted_arnerve.kinect_body_update_t();
            outobj.username = this.username;
 
            outobj.istrackingbody = this.istrackingbody;
 
            outobj.torsoposition = this.torsoposition.Copy();
 
            outobj.forwardvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.forwardvec[a] = this.forwardvec[a];
            }
 
            outobj.upvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.upvec[a] = this.upvec[a];
            }
 
            outobj.rightvec = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.rightvec[a] = this.rightvec[a];
            }
 
            outobj.is_rhandclosed = this.is_rhandclosed;
 
            outobj.is_lhandclosed = this.is_lhandclosed;
 
            outobj.rhandposition = this.rhandposition.Copy();
 
            outobj.lhandposition = this.lhandposition.Copy();
 
            outobj.headorientation = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.headorientation[a] = this.headorientation[a];
            }
 
            outobj.headposition = this.headposition.Copy();
 
            outobj.joint_data = this.joint_data.Copy();
 
            return outobj;
        }
    }
}

