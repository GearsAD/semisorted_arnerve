/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace semisorted_arnerve
{
    public sealed class kinect_update_t : LCM.LCM.LCMEncodable
    {
        public long timestamp;
        public String devicename;
        public semisorted_arnerve.kinect_camera_update_t camera_update;
        public byte issourceupdating_camera;
        public byte NUMBODIES;
        public semisorted_arnerve.kinect_body_update_t[] bodies_update;
        public byte issourceupdating_bodies;
 
        public kinect_update_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xa125faa6329b8057L;
 
        static kinect_update_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("semisorted_arnerve.kinect_update_t"))
                return 0L;
 
            classes.Add("semisorted_arnerve.kinect_update_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + semisorted_arnerve.kinect_camera_update_t._hashRecursive(classes)
                 + semisorted_arnerve.kinect_body_update_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.timestamp); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.devicename); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            this.camera_update._encodeRecursive(outs); 
 
            outs.Write(this.issourceupdating_camera); 
 
            outs.Write(this.NUMBODIES); 
 
            for (int a = 0; a < this.NUMBODIES; a++) {
                this.bodies_update[a]._encodeRecursive(outs); 
            }
 
            outs.Write(this.issourceupdating_bodies); 
 
        }
 
        public kinect_update_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public kinect_update_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static semisorted_arnerve.kinect_update_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            semisorted_arnerve.kinect_update_t o = new semisorted_arnerve.kinect_update_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.timestamp = ins.ReadInt64();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.devicename = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.camera_update = semisorted_arnerve.kinect_camera_update_t._decodeRecursiveFactory(ins);
 
            this.issourceupdating_camera = ins.ReadByte();
 
            this.NUMBODIES = ins.ReadByte();
 
            this.bodies_update = new semisorted_arnerve.kinect_body_update_t[(int) NUMBODIES];
            for (int a = 0; a < this.NUMBODIES; a++) {
                this.bodies_update[a] = semisorted_arnerve.kinect_body_update_t._decodeRecursiveFactory(ins);
            }
 
            this.issourceupdating_bodies = ins.ReadByte();
 
        }
 
        public semisorted_arnerve.kinect_update_t Copy()
        {
            semisorted_arnerve.kinect_update_t outobj = new semisorted_arnerve.kinect_update_t();
            outobj.timestamp = this.timestamp;
 
            outobj.devicename = this.devicename;
 
            outobj.camera_update = this.camera_update.Copy();
 
            outobj.issourceupdating_camera = this.issourceupdating_camera;
 
            outobj.NUMBODIES = this.NUMBODIES;
 
            outobj.bodies_update = new semisorted_arnerve.kinect_body_update_t[(int) NUMBODIES];
            for (int a = 0; a < this.NUMBODIES; a++) {
                outobj.bodies_update[a] = this.bodies_update[a].Copy();
            }
 
            outobj.issourceupdating_bodies = this.issourceupdating_bodies;
 
            return outobj;
        }
    }
}

