"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import kinect_joint_t

class kinect_rawdata_t(object):
    __slots__ = ["NUMIMAGEBYTES", "imagejpg_rgb", "imagejpg_depth", "NUMJOINTS", "bodyjoints"]

    def __init__(self):
        self.NUMIMAGEBYTES = 0
        self.imagejpg_rgb = []
        self.imagejpg_depth = []
        self.NUMJOINTS = 0
        self.bodyjoints = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(kinect_rawdata_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.NUMIMAGEBYTES))
        buf.write(struct.pack('>%db' % self.NUMIMAGEBYTES, *self.imagejpg_rgb[:self.NUMIMAGEBYTES]))
        buf.write(struct.pack('>%db' % self.NUMIMAGEBYTES, *self.imagejpg_depth[:self.NUMIMAGEBYTES]))
        buf.write(struct.pack(">i", self.NUMJOINTS))
        for i0 in range(self.NUMJOINTS):
            assert self.bodyjoints[i0]._get_packed_fingerprint() == kinect_joint_t.kinect_joint_t._get_packed_fingerprint()
            self.bodyjoints[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != kinect_rawdata_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kinect_rawdata_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kinect_rawdata_t()
        self.NUMIMAGEBYTES = struct.unpack(">i", buf.read(4))[0]
        self.imagejpg_rgb = struct.unpack('>%db' % self.NUMIMAGEBYTES, buf.read(self.NUMIMAGEBYTES))
        self.imagejpg_depth = struct.unpack('>%db' % self.NUMIMAGEBYTES, buf.read(self.NUMIMAGEBYTES))
        self.NUMJOINTS = struct.unpack(">i", buf.read(4))[0]
        self.bodyjoints = []
        for i0 in range(self.NUMJOINTS):
            self.bodyjoints.append(kinect_joint_t.kinect_joint_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kinect_rawdata_t in parents: return 0
        newparents = parents + [kinect_rawdata_t]
        tmphash = (0x83f3c2f97d2f262d+ kinect_joint_t.kinect_joint_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kinect_rawdata_t._packed_fingerprint is None:
            kinect_rawdata_t._packed_fingerprint = struct.pack(">Q", kinect_rawdata_t._get_hash_recursive([]))
        return kinect_rawdata_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

