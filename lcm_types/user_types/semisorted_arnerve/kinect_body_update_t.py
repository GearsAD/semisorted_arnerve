"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import kinect_bodyframe_update_t

import kinect_joint_t

class kinect_body_update_t(object):
    __slots__ = ["username", "istrackingbody", "torsoposition", "forwardvec", "upvec", "rightvec", "is_rhandclosed", "is_lhandclosed", "rhandposition", "lhandposition", "headorientation", "headposition", "joint_data"]

    def __init__(self):
        self.username = ""
        self.istrackingbody = 0
        self.torsoposition = None
        self.forwardvec = [ 0.0 for dim0 in range(3) ]
        self.upvec = [ 0.0 for dim0 in range(3) ]
        self.rightvec = [ 0.0 for dim0 in range(3) ]
        self.is_rhandclosed = 0
        self.is_lhandclosed = 0
        self.rhandposition = None
        self.lhandposition = None
        self.headorientation = [ 0.0 for dim0 in range(3) ]
        self.headposition = None
        self.joint_data = None

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(kinect_body_update_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __username_encoded = self.username.encode('utf-8')
        buf.write(struct.pack('>I', len(__username_encoded)+1))
        buf.write(__username_encoded)
        buf.write("\0")
        buf.write(struct.pack(">B", self.istrackingbody))
        assert self.torsoposition._get_packed_fingerprint() == kinect_joint_t.kinect_joint_t._get_packed_fingerprint()
        self.torsoposition._encode_one(buf)
        buf.write(struct.pack('>3d', *self.forwardvec[:3]))
        buf.write(struct.pack('>3d', *self.upvec[:3]))
        buf.write(struct.pack('>3d', *self.rightvec[:3]))
        buf.write(struct.pack(">BB", self.is_rhandclosed, self.is_lhandclosed))
        assert self.rhandposition._get_packed_fingerprint() == kinect_joint_t.kinect_joint_t._get_packed_fingerprint()
        self.rhandposition._encode_one(buf)
        assert self.lhandposition._get_packed_fingerprint() == kinect_joint_t.kinect_joint_t._get_packed_fingerprint()
        self.lhandposition._encode_one(buf)
        buf.write(struct.pack('>3d', *self.headorientation[:3]))
        assert self.headposition._get_packed_fingerprint() == kinect_joint_t.kinect_joint_t._get_packed_fingerprint()
        self.headposition._encode_one(buf)
        assert self.joint_data._get_packed_fingerprint() == kinect_bodyframe_update_t.kinect_bodyframe_update_t._get_packed_fingerprint()
        self.joint_data._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != kinect_body_update_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kinect_body_update_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kinect_body_update_t()
        __username_len = struct.unpack('>I', buf.read(4))[0]
        self.username = buf.read(__username_len)[:-1].decode('utf-8', 'replace')
        self.istrackingbody = struct.unpack(">B", buf.read(1))[0]
        self.torsoposition = kinect_joint_t.kinect_joint_t._decode_one(buf)
        self.forwardvec = struct.unpack('>3d', buf.read(24))
        self.upvec = struct.unpack('>3d', buf.read(24))
        self.rightvec = struct.unpack('>3d', buf.read(24))
        self.is_rhandclosed, self.is_lhandclosed = struct.unpack(">BB", buf.read(2))
        self.rhandposition = kinect_joint_t.kinect_joint_t._decode_one(buf)
        self.lhandposition = kinect_joint_t.kinect_joint_t._decode_one(buf)
        self.headorientation = struct.unpack('>3d', buf.read(24))
        self.headposition = kinect_joint_t.kinect_joint_t._decode_one(buf)
        self.joint_data = kinect_bodyframe_update_t.kinect_bodyframe_update_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kinect_body_update_t in parents: return 0
        newparents = parents + [kinect_body_update_t]
        tmphash = (0x955673e04dc7ef8d+ kinect_joint_t.kinect_joint_t._get_hash_recursive(newparents)+ kinect_joint_t.kinect_joint_t._get_hash_recursive(newparents)+ kinect_joint_t.kinect_joint_t._get_hash_recursive(newparents)+ kinect_joint_t.kinect_joint_t._get_hash_recursive(newparents)+ kinect_bodyframe_update_t.kinect_bodyframe_update_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kinect_body_update_t._packed_fingerprint is None:
            kinect_body_update_t._packed_fingerprint = struct.pack(">Q", kinect_body_update_t._get_hash_recursive([]))
        return kinect_body_update_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

