"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import kinect_camera_update_t

import kinect_body_update_t

class kinect_update_t(object):
    __slots__ = ["timestamp", "devicename", "camera_update", "issourceupdating_camera", "NUMBODIES", "bodies_update", "issourceupdating_bodies"]

    def __init__(self):
        self.timestamp = 0
        self.devicename = ""
        self.camera_update = None
        self.issourceupdating_camera = 0
        self.NUMBODIES = 0
        self.bodies_update = []
        self.issourceupdating_bodies = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(kinect_update_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __devicename_encoded = self.devicename.encode('utf-8')
        buf.write(struct.pack('>I', len(__devicename_encoded)+1))
        buf.write(__devicename_encoded)
        buf.write("\0")
        assert self.camera_update._get_packed_fingerprint() == kinect_camera_update_t.kinect_camera_update_t._get_packed_fingerprint()
        self.camera_update._encode_one(buf)
        buf.write(struct.pack(">Bb", self.issourceupdating_camera, self.NUMBODIES))
        for i0 in range(self.NUMBODIES):
            assert self.bodies_update[i0]._get_packed_fingerprint() == kinect_body_update_t.kinect_body_update_t._get_packed_fingerprint()
            self.bodies_update[i0]._encode_one(buf)
        buf.write(struct.pack(">B", self.issourceupdating_bodies))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != kinect_update_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kinect_update_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kinect_update_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __devicename_len = struct.unpack('>I', buf.read(4))[0]
        self.devicename = buf.read(__devicename_len)[:-1].decode('utf-8', 'replace')
        self.camera_update = kinect_camera_update_t.kinect_camera_update_t._decode_one(buf)
        self.issourceupdating_camera, self.NUMBODIES = struct.unpack(">Bb", buf.read(2))
        self.bodies_update = []
        for i0 in range(self.NUMBODIES):
            self.bodies_update.append(kinect_body_update_t.kinect_body_update_t._decode_one(buf))
        self.issourceupdating_bodies = struct.unpack(">B", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kinect_update_t in parents: return 0
        newparents = parents + [kinect_update_t]
        tmphash = (0xa125faa6329b8057+ kinect_camera_update_t.kinect_camera_update_t._get_hash_recursive(newparents)+ kinect_body_update_t.kinect_body_update_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kinect_update_t._packed_fingerprint is None:
            kinect_update_t._packed_fingerprint = struct.pack(">Q", kinect_update_t._get_hash_recursive([]))
        return kinect_update_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

